#+TITLE: Doom Emacs Config

this setup was taken from [[https://www.youtube.com/watch?v=SzA2YODtgK4&ab_channel=thoughtbot][this video]] and the [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][setup he uses]].

* UI preferences
** General
The default frame title isn't useful. This binds it to the name of the current
project:

#+begin_src emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

automatic window (re)sizing
TODO

#+begin_src elisp
;;(use-package zoom
;;  :hook (doom-first-input . zoom-mode)
;;  :config
;;  (setq ;;zoom-size '(0.7 . 0.7) ;; don't wanna deal with this
;;        ;; evil mode set here. basically I don't ever want to zoom in
;;        zoom-ignored-major-modes '(evil-mode dired-mode vterm-mode shell-dirtrack-mode help-mode helpful-mode rxt-help-mode help-mode-menu org-mode)
;;        zoom-ignored-buffer-names '("*doom:scratch*" "*info*" "*helpful variable: argv*" "*org-roam*")
;;        zoom-ignored-buffer-name-regexps '("^\\*calc" "\\*helpful variable: .*\\*")
;;        zoom-ignore-predicates (list (lambda () (> (count-lines (point-min) (point-max)) 20)))))
#+end_src

theme (doom theme)

#+begin_src elisp
(load-theme 'my-vibrant t)
(custom-set-faces! `(default :background ,(doom-darken 'bg-alt 0.01)))
#+end_src
** Modeline

doom-modeline package for [[https://github.com/seagle0128/doom-modeline][dopeness]]
#+begin_src elisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)

  ;; this sets column in modeline!
  (column-number-mode)
  (set-face-attribute 'mode-line nil :height 90)
  (set-face-attribute 'mode-line-inactive nil :height 100)
  (setq doom-modeline-height 1)
  (face-attribute 'mode-line :height)
  (setq doom-modeline-percent-position nil)
  (buffer-local-value 'mode-line-format (current-buffer))

;; got rid of lsp, major-mode, misc-info
  (doom-modeline-def-modeline 'main
    '(bar window-number matches buffer-info remote-host buffer-position word-count parrot selection-info)
    '(persp-name grip irc mu4e gnus debug repl minor-modes input-method indent-info process vcs)))
#+end_src


and make multi-term use it

#+begin_src elisp
(add-hook! 'term-mode-hook
           'doom-modeline-mode)
#+end_src
* Keybindings
** kevin paredit!

#+begin_src elisp
(define-minor-mode kevin-paredit-mode
  "lisp state for paredit"
  :lighter " kevin paredit"
  (setq evil-move-beyond-eol kevin-paredit-mode))

(defmacro kevin/sp-kill-movement-fn (name &rest body)
  `(defalias (intern (concat "kevin/kill-to-"
                          (symbol-name (quote ,name))))
     (lambda ()
       (interactive)
       (let ((p (point)))
         ,@body
         (sp-kill-region p (point))))))

(evil-define-minor-mode-key
  '(normal visual) 'kevin-paredit-mode
  "B" 'sp-backward-barf-sexp
  "b" 'sp-forward-barf-sexp
  "s" 'sp-forward-slurp-sexp
  "S" 'sp-backward-slurp-sexp
  "t" 'sp-transpose-sexp
  ;; parens
  "[" 'sp-wrap-square
  "{" 'sp-wrap-curly
  "w" 'sp-wrap-round
  "W" 'sp-unwrap-sexp
  "m" 'sp-mark-sexp
  ;; killing
  "da" 'sp-splice-sexp-killing-around
  "d$" (kevin/sp-kill-movement-fn
        end-of-sexp
        (sp-end-of-sexp))
  "d0" (kevin/sp-kill-movement-fn
        beginning-of-sexp
        (sp-beginning-of-sexp))
  "dl" (kevin/sp-kill-movement-fn
        next-sexp
        (sp-forward-sexp))
  "dh" (kevin/sp-kill-movement-fn
        beginning-of-sexp
        (sp-backward-sexp))

  ;; movement
  "h" 'sp-backward-sexp
  "H" 'sp-backward-down-sexp
  "l" 'sp-forward-sexp
  "L" 'sp-down-sexp
  "j" 'sp-down-sexp
  "k" 'sp-backward-up-sexp
  "." 'kevin-paredit-mode)

(general-define-key
 :states '(normal visual)
 :keymaps 'global
 :prefix "SPC"
 "k" 'kevin-paredit-mode)
#+end_src

#+RESULTS:

* General Setup
supposed to kind of recreate my vimrc
** Keybindings
#+begin_src elisp
;; sets comma as spc m
(setq evil-snipe-override-evil-repeat-keys nil)
(setq doom-localleader-key ",")

;; vinegar
(define-key evil-normal-state-map (kbd "-") 'dired-jump)

;; requires key-chord package
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-mode 1)
(setq key-chord-one-key-delay 0.4)
#+end_src
** Random Config
#+begin_src elisp
;; github yank line link
;; (setq browse-at-remote-remote-type-domains
;;       (cons '("github.dev.pages" . "github") browse-at-remote-remote-type-domains))
;; dont prompt on exit
(setq confirm-kill-emacs nil)
;; when exit insert mode exit
(setq evil-move-cursor-back t)
;; c source directory so it doesn't prompt each time
(setq find-function-C-source-directory "~/Documents/me/emacs-build/emacs-ng-2/src")

;; flycheck has horrible perf.. maybe?
(setq flycheck-check-syntax-automatically '(save idle-change))

(setq kevin-project-root "johnson")
(setq kevin-project-root-timer
      (run-with-idle-timer 1 t (lambda () (setq kevin-project-root (projectile-project-root)))))
(setq frame-title-format 'kevin-project-root)
#+end_src

#+RESULTS:
| :eval | (projectile-project-root) |

line numbers

#+begin_src elisp
(setq display-line-numbers-type nil)
(remove-hook! '(prog-mode-hook text-mode-hook conf-mode-hook)
  #'display-line-numbers-mode)
#+end_src
** Project management
*** git
#+begin_src elisp
(use-package browse-at-remote
  :config
  (setq browse-at-remote-remote-type-regexps
        (cons '("github.dev.pages$" . "github")
              browse-at-remote-remote-type-regexps)))
#+end_src

*** =company=
use =company-mode= everywhere

#+begin_src elisp
(use-package! company
  :config
    (setq company-idle-delay 0.5)
    (company-mode-on))
(global-company-mode)
#+end_src
* Org Mode
** setup

eval thing

#+begin_src elisp
(define-key org-mode-map (kbd "C-c f") #'org-babel-execute-src-block)
#+end_src

Including =org-tempo= restores the =<s=-style easy-templates that were
deprecated in Org 9.2.

#+begin_src elisp
(require 'org-tempo)
#+end_src

idk what this is, came with doom

#+begin_src elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")
#+end_src

TODO archive

#+begin_src elisp
(defun kevin/org-archive-subtree
  (org-copy-subtree))
#+end_src`
** Display preferences

Start with everything folded

#+begin_src elisp
(setq org-startup-folded 't)
#+end_src

#+RESULTS:

I like to see an outline of pretty bullets instead of a list of asterisks.

#+begin_src emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+begin_src emacs-lisp
  ;; (setq org-ellipsis "[+]")
#+end_src

This hides the slashes and stars that denote /emphasis/ and *bold* text.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Make TAB act as if it were issued in a buffer of the language's major mode.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

** org-roam
#+begin_src elisp
(setq org-roam-v2-ack t)
(use-package org-roam
  :hook
  ;; this builds the cache
  (after-init . org-roam-mode)
  (after-init . org-roam-db-autosync-mode)
  :custom
  (org-roam-directory "~/Documents/notes/org-roam")
  :bind (:map org-roam-mode-map ;; this isn't a thing now
         (("C-c n l" . org-roam)
          ("C-c n g" . org-roam-graph))
         :map org-mode-map
         (("C-c n i" . org-roam-insert)
          ("C-c n I" . org-roam-insert-immediate)
          ("C-c n c" . org-id-get-create)
          ("C-c n f" . org-roam-node-find)))
  :config
  (setq org-roam-dailies-directory "daily/")
  )
#+end_src

* Language-Specific
** Lisp

goto for elisp

#+begin_src elisp
(map! :mode emacs-lisp-mode
      :localleader
      "gg" #'elisp-slime-nav-find-elisp-thing-at-point
      "gb" #'pop-tag-mark)
#+end_src
** Clojure

nice keybindings

#+begin_src elisp
(map! :mode clojure-mode
      :localleader
      "e." (lambda (&optional output-to-current-buffer)
             (interactive "P")
             (save-excursion
               (goto-char (- (cadr (cider-list-at-point 'bounds)) 1))
               (cider-eval-last-sexp output-to-current-buffer)))
      "ef" #'cider-eval-defun-at-point
      "e;" (lambda (&rest output-to-current-buffer)
             (interactive "P")
             (save-excursion
               (goto-char (- (cadr (cider-list-at-point 'bounds)) 0))
               (cider-pprint-form-to-comment 'cider-last-sexp nil)))
      "et" (lambda (&optional output-to-current-buffer)
             (interactive "P")
             (cider-interactive-eval (concat "(clojure.test/test-vars [\n"
                                             (cider-defun-at-point)
                                             "])")
                                     nil
                                     (cider-defun-at-point 'bounds)
                                     (cider--nrepl-pr-request-map)))
      "en" #'cider-eval-ns-form)
#+end_src

#+RESULTS:

package setup

for code alignment, look at [[https://github.com/clojure-emacs/clojure-mode#indentation-of-macro-forms][clojure mode docs]] and at [[https://docs.cider.mx/cider/indent_spec.html][cider docs]]

#+begin_src elisp
(use-package lsp-mode
  :hook ((clojure-mode . lsp)
         (clojurec-mode . lsp)
         (clojurescript-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp
  :config
  ;; add paths to your local installation of project mgmt tools, like lein

  ;; disable modeline diagnostics
  ;; this takes a long time on a screen rerender. Plus I never use
  (setq lsp-modeline-diagnostics-enable nil)
  ;;(setq lsp-keymap-prefix "C-l")
  (setq gc-cons-threshold (* 100 1024 1024)
        read-prcess-output-max (* 1024 1024))

  ;; from https://www.youtube.com/watch?v=grL3DQyvneI&ab_channel=LondonClojurians
  (setq cider-eldoc-display-for-symbol-at-point nil ;; disable cider eldoc
        cider-repl-display-help-banner nil      ;; disable help banner
        ;; no header see https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
        lsp-headerline-breadcrumb-enable nil)

  ;; necessary for showing references without relative path
  (setq ivy-xref-use-file-path t)
  (setq xref-file-name-display 'project-relative)

  (dolist (m '(clojure-mode
               clojurec-mode
               clojurescript-mode
               clojurex-mode))
     (add-to-list 'lsp-language-id-configuration `(,m . "clojure"))))
#+end_src



#+begin_src elisp
(add-hook! clojure-mode
  (aggressive-indent-mode)
  (hs-minor-mode)
  ;; cider mode might be slow eval still works so gonna try disabling
  (cider-mode)

  (setq clojure-toplevel-inside-comment-form t)

  ;; code alignment

  (setq clojure-align-forms-automatically t)

  (define-clojure-indent
    (into 1)
    (do-template :form)
    (comment 1)
    (macrolet '(1 ((:defn)) nil))))
#+end_src

makes so aggressive indent won't go until you exit insert mode

#+begin_src elisp
(define-advice aggressive-indent--indent-if-changed (:around (orig-fun buffer) aggressive-indent-advice)
  (when (not (with-current-buffer buffer
               (evil-insert-state-p)))
    (funcall orig-fun buffer)))
#+end_src

cider configs

#+begin_src elisp
;;(setq cider-comment-prefix "\n;; => ")
(use-package cider
  :config
  (setq cider-comment-prefix "\n;; => "
        cider-repl-buffer-size-limit 100)

  ;; this is to fix the cider jack in to by my own thing because they changed some
  ;; version and got rid of =cider-clojure-cli-parameters=
  (setq cider-inject-dependencies-at-jack-in nil)
  (setq cider-jack-in-dependencies nil)
  (setq cider-jack-in-auto-inject-clojure nil)
(defvar kev-clojure-cli-param-hist '("-M:test:dev:local-dev" "-M:cljs")
  "cider jack in params")
(define-advice cider-jack-in-params (:around (orig-fun project-type) jack-in-param-advice)
  (pcase project-type
    ('clojure-cli (ivy-read "clojure cli params: "
                               kev-clojure-cli-param-hist
                               :history 'kev-clojure-cli-param-hist))
    (_ (funcall orig-fun project-type)))))
#+end_src

#+RESULTS:
: cider-jack-in-params@jack-in-param-advice

** cue
#+begin_src emacs-lisp
(defconst cue-keywords
  '("package" "import" "for" "in" "if" "let"))

(defconst cue-constants '("null" "true" "false"))

(defconst cue-types
  '("int" "float" "string" "bool" "bytes"))

(defvar cue--font-lock-keywords
  `(("//.*" . font-lock-comment-face)
    (,(regexp-opt cue-constants 'symbols) . font-lock-constant-face)
    (,(regexp-opt cue-keywords 'symbols) . font-lock-keyword-face)
    (,(regexp-opt cue-types 'symbols) . font-lock-type-face)))

;;;###autoload
(define-derived-mode cue-mode prog-mode "CUE"
  "Major mode for the CUE language."

  ;; Comments
  (setq-local comment-start "// ")
  (setq-local comment-end "")
  (setq-local comment-start-skip "//[[:space:]]*")

  (setq indent-tabs-mode t)

  (setq-local font-lock-defaults '(cue--font-lock-keywords)))

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.cue\\'" . cue-mode))
#+end_src

* TODO
- [ ] archive todo
  - would also like a popup to ask where to put it?
  - this could have much overlapping functionality with add-to-list
    which allows you insert an org-roam link and add that link to a
    list somewhere and then you put whatever at that link
- [ ] keybindings
  - eval-test-around-point
  - eval-previously-evaled-test
- [ ] modify autoindent to be smarter! maybe use clj-kondo?
- [ ] auto right align for maps and lets (like how aggressive indent works)
- [ ] popup for cider errors instead of other window
- [ ] multiterm keybindings and alias it to just "term"
- [ ] move buffer 1,2,3,4,5,6...
- [ ] make symbols that cider doesn't recognise be a different color. e.g. async-clj/go-ctch
- [ ] clojure errors go to popwin
- [ ] investigate difference between clojure-layer and clojure-mode to bring back useful keybindings
  - might need to change clojure major mode's leader?
- [ ] format buffer with smartparens (bc it does that somehow)
  - of integrate cljfmt, or something. ask imre if there's a standard config
- [ ] advice for dired, select file, do delete all dired buffers so back buffer works
- [X] paredit
- [X] fix eval to comment
- [X] doom modeline
- [X] eval sexp around point
